// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MobileBackend.Models;

namespace MobileBackend.Migrations
{
    [DbContext(typeof(MobileBackendContext))]
    [Migration("20190927180557_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MobileBackend.Models.DBUser", b =>
                {
                    b.Property<Guid>("UUID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("loginkey");

                    b.HasKey("UUID");

                    b.HasIndex("loginkey");

                    b.ToTable("DBUser");
                });

            modelBuilder.Entity("MobileBackend.Models.Instrument", b =>
                {
                    b.Property<int>("InstrumentID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Adress");

                    b.Property<string>("DisplayName");

                    b.Property<Guid?>("Instrument");

                    b.Property<Guid>("UUID");

                    b.HasKey("InstrumentID");

                    b.HasIndex("Instrument");

                    b.ToTable("Instrument");

                    b.HasData(
                        new
                        {
                            InstrumentID = -1,
                            Adress = "localhost",
                            DisplayName = "VSPXXXXX",
                            UUID = new Guid("ef091044-d994-404f-bb60-f4680107f27a")
                        });
                });

            modelBuilder.Entity("MobileBackend.Models.Notification", b =>
                {
                    b.Property<int>("NotifivationID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("Instrument");

                    b.Property<int>("InstrumentID");

                    b.Property<string>("NotificationDescription");

                    b.Property<string>("NotificationName");

                    b.HasKey("NotifivationID");

                    b.HasIndex("Instrument");

                    b.ToTable("Notification");

                    b.HasData(
                        new
                        {
                            NotifivationID = -1,
                            InstrumentID = -1,
                            NotificationDescription = "Instrument will cease to function without user attention",
                            NotificationName = "Alert"
                        },
                        new
                        {
                            NotifivationID = -2,
                            InstrumentID = -1,
                            NotificationDescription = "Instrument will not function at full capacity without attention",
                            NotificationName = "Warning"
                        },
                        new
                        {
                            NotifivationID = -3,
                            InstrumentID = -1,
                            NotificationDescription = "Batch will not complete without user attention",
                            NotificationName = "ErrorSample"
                        },
                        new
                        {
                            NotifivationID = -4,
                            InstrumentID = -1,
                            NotificationDescription = "Inventory item below 30% capacity",
                            NotificationName = "LowInventory"
                        },
                        new
                        {
                            NotifivationID = -5,
                            InstrumentID = -1,
                            NotificationDescription = "Inventory item below  5% capacity",
                            NotificationName = "EmptyInventory"
                        });
                });

            modelBuilder.Entity("MobileBackend.Models.NotificationDBUser", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid?>("DBUserUUID");

                    b.Property<int>("NotifivationID");

                    b.Property<Guid>("UserUUID");

                    b.HasKey("ID");

                    b.HasIndex("DBUserUUID");

                    b.HasIndex("NotifivationID");

                    b.ToTable("NotificationDBUser");
                });

            modelBuilder.Entity("MobileBackend.Models.RaisedNotification", b =>
                {
                    b.Property<Guid>("NotificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("DetailDescription");

                    b.Property<int?>("Instrument");

                    b.Property<string>("InstrumentDisplayName");

                    b.Property<string>("Name");

                    b.Property<DateTimeOffset>("When");

                    b.Property<string>("notificationType");

                    b.HasKey("NotificationId");

                    b.HasIndex("Instrument");

                    b.ToTable("RaisedNotification");
                });

            modelBuilder.Entity("MobileBackend.Models.RegisteredUsers", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("NotificationInstrumentID");

                    b.Property<int>("UserID");

                    b.HasKey("ID");

                    b.ToTable("RegisteredUsers");
                });

            modelBuilder.Entity("MobileBackend.Models.device", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<Guid>("DeviceID");

                    b.Property<DateTime>("LastContact");

                    b.Property<string>("Platform");

                    b.Property<Guid?>("device");

                    b.Property<string>("notificationHubRegistration");

                    b.HasKey("ID");

                    b.HasIndex("device");

                    b.ToTable("device");
                });

            modelBuilder.Entity("MobileBackend.Models.login", b =>
                {
                    b.Property<int>("key")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("encrypted");

                    b.Property<byte[]>("salt");

                    b.Property<string>("userName");

                    b.HasKey("key");

                    b.ToTable("login");
                });

            modelBuilder.Entity("MobileBackend.Models.DBUser", b =>
                {
                    b.HasOne("MobileBackend.Models.login", "login")
                        .WithMany()
                        .HasForeignKey("loginkey");
                });

            modelBuilder.Entity("MobileBackend.Models.Instrument", b =>
                {
                    b.HasOne("MobileBackend.Models.DBUser")
                        .WithMany("AcessableInstruments")
                        .HasForeignKey("Instrument");
                });

            modelBuilder.Entity("MobileBackend.Models.Notification", b =>
                {
                    b.HasOne("MobileBackend.Models.Instrument", "OriginInstrument")
                        .WithMany()
                        .HasForeignKey("Instrument");
                });

            modelBuilder.Entity("MobileBackend.Models.NotificationDBUser", b =>
                {
                    b.HasOne("MobileBackend.Models.DBUser")
                        .WithMany("watchingNotificcations")
                        .HasForeignKey("DBUserUUID");

                    b.HasOne("MobileBackend.Models.Notification")
                        .WithMany("RegisteredUsers")
                        .HasForeignKey("NotifivationID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MobileBackend.Models.RaisedNotification", b =>
                {
                    b.HasOne("MobileBackend.Models.Instrument", "originatingInstrument")
                        .WithMany()
                        .HasForeignKey("Instrument");
                });

            modelBuilder.Entity("MobileBackend.Models.device", b =>
                {
                    b.HasOne("MobileBackend.Models.DBUser")
                        .WithMany("devices")
                        .HasForeignKey("device");
                });
#pragma warning restore 612, 618
        }
    }
}
